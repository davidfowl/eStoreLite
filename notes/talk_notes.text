8 minutes:
- Show the app running first
- Ask the audience what the first thing to do is (measure!)
- 2 kinds of profiles, allocation and CPU profile
- Talk about the load tool bombardier OSS tool
- Use pre-canned CPU profile
 - Home page
- Use pre-canned CPU profile
 - Show CatalogService.GetItemsAsync
- Use allocation profile
 - Show Byte[], and String
 - Show Blazor (https://github.com/dotnet/aspnetcore/pull/48406)
- Fix the code in both places

Backend: 
 - Set startup project to backend only
 - Change profiler to target the backend
 - Image backend
 - Show dotnet trace collection command line

 - Show the CPU profile
 - CatalogService.Controllers.CatalogController.ItemsByBrandIdAsync()

Frontend code:

app.MapForwarder("/catalog/images/{id}", catalogServiceUrl, "/api/v1/catalog/items/{id}/image");

Demo:

ParameterExtractingExpressionVisitor
CompiledQueryCache
Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable<T>.MoveNext()

Backend code:

public record Catalog(int FirstId, int NextId, bool IsLastPage, IEnumerable<CatalogItem> Data);
