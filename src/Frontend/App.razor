@using Frontend.Components
@inject CatalogService CatalogService

<html>
<head>
    <title>eShopLite</title>
    <link rel="stylesheet" href="site.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css"
          integrity="sha256-eZrrJcwDc/3uDhsdt61sL2oOBY362qM3lon1gyExkL0=" crossorigin="anonymous">
</head>
<body>
    <header class="d-flex align-items-center justify-content-center">
        <h2 class="app-name pa-4">&lt;eShopLite /&gt;</h2>
        <div class="flex-spacer"></div>
        <h2 class="text-align-center">Product Catalog</h2>
        <div class="flex-spacer"></div>
        <Cart ItemsInCart="@itemsInCart" />
    </header>

    <div class="container">
        @if (catalog is { Data: var data })
        {
            <div class="grid">
                @foreach (var item in data)
                {
                    <div class="grid-item" data-id="@item.Id">
                        <div class="grid-item-content">
                            <img src="catalog/images/@item.Id" alt="@item.Name" />
                            <div class="quick-view-overlay">
                                <i class="fa fa-search-plus" aria-hidden="true"></i>
                            </div>
                            <div class="grid-item-text">
                                <h4 class="pointer-events-none">@item.Name</h4>
                                <p class="item-description pointer-events-none">@item.Description</p>
                                <div class="d-flex justify-space-evenly align-items-center">
                                    <p class="item-price pointer-events-none">@item.Price.ToString("C")</p>
                                    <button class="align-content-end cart-button" 
                                        title=@($"Add {@item.Name} to cart?")>
                                        <i class="fa fa-cart-plus" aria-hidden="true"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <div class="pager">
                @* <a class="previous button" disable=@(paginationInfo.HasPreviousPage is false)
                   href="?page=@(paginationInfo.Page-1)">
                    <i class="fa fa-arrow-left" aria-hidden="true"></i>
                    Previous
                </a>

                <a class="next button" disable=@(paginationInfo.HasNextPage is false)
                   href="?page=@(paginationInfo.Page+1)">
                    Next
                    <i class="fa fa-arrow-right" aria-hidden="true"></i>
                </a> *@

                <a class="previous button" disable=@(paginationInfo.HasPreviousPage is false)
                   href="?before=@paginationInfo.FirstId">
                    <i class="fa fa-arrow-left" aria-hidden="true"></i>
                    Previous
                </a>

                <a class="next button" disable=@(paginationInfo.HasNextPage is false)
                   href="?after=@paginationInfo.NextId">
                    Next
                    <i class="fa fa-arrow-right" aria-hidden="true"></i>
                </a>
            </div>
        }
        else
        {
            <p>Loading...</p>
        }
    </div>

    <AppFooter />
</body>
</html>

@code {
    int itemsInCart = 0;

    // Catalog? catalog;
    // PaginationInfo paginationInfo = new(Page: 0, HasPreviousPage: false, HasNextPage: false);

    // [Parameter]
    // public int? Page { get; set; }

    Catalog? catalog;
    PaginationInfo paginationInfo = new(FirstId: 0, NextId: 0, HasPreviousPage: false, HasNextPage: false);

    [Parameter]
    public int? Before { get; set; }

    [Parameter]
    public int? After { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //catalog = await CatalogService.GetItemsAsync(Page ?? 0);

        catalog = await CatalogService.GetItemsAsync(Before, After);

        if (catalog is null)
        {
            return;
        }

        // Calculate the total number of pages
        //var totalPages = (int)Math.Ceiling(catalog.Count / (decimal)catalog.PageSize);
        //paginationInfo = new PaginationInfo(catalog.PageIndex, catalog.PageIndex > 0, catalog.PageIndex + 1 < totalPages);

        paginationInfo = new PaginationInfo(catalog.FirstId, catalog.NextId, catalog.FirstId > 1, !catalog.IsLastPage);
    }

    //record PaginationInfo(int Page, bool HasPreviousPage, bool HasNextPage);

    record PaginationInfo(int FirstId, int NextId, bool HasPreviousPage, bool HasNextPage);
}