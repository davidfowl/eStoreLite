@page "/{id?}"
@attribute [StreamRendering(true)]
@inject CatalogService CatalogService
@inject NavigationManager Nav
@inject FormDataProvider FormData

@if (catalog is { Data: var data })
{
    <div class="grid">
        @foreach (var item in data)
        {
            <div class="grid-item" data-id="@item.Id">
                <div class="grid-item-content">
                    <img src="catalog/images/@item.Id" alt="@item.Name" />
                    <div class="quick-view-overlay">
                        <i class="fa fa-search-plus" aria-hidden="true"></i>
                    </div>
                    <div class="grid-item-text">
                        <h4 class="pointer-events-none">@item.Name</h4>
                        <p class="item-description pointer-events-none">@item.Description</p>
                        <div class="d-flex justify-space-evenly align-items-center">
                            <p class="item-price pointer-events-none">@item.Price.ToString("C")</p>
                            <EditForm 
                                method="post"
                                action="@($"/{item.Id}")"
                                FormHandlerName="@($"AddToCart[{item.Id}]")"
                                OnValidSubmit="AddToCart">
                                <button type="submit" class="align-content-end cart-button" title=@($"Add {@item.Name} to cart?")>
                                    <i class="fa fa-cart-plus" aria-hidden="true"></i>
                                </button>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="pager">
        <a class="previous button" disable=@(paginationInfo.HasPreviousPage is false)
           href="?before=@paginationInfo.FirstId">
            <i class="fa fa-arrow-left" aria-hidden="true"></i>
            Previous
        </a>

        <a class="next button" disable=@(paginationInfo.HasNextPage is false)
           href="?after=@paginationInfo.NextId">
            Next
            <i class="fa fa-arrow-right" aria-hidden="true"></i>
        </a>
    </div>
}
else
{
    <p>Loading...</p>
}

@code {
    Catalog? catalog;
    PaginationInfo paginationInfo = new(FirstId: 0, NextId: 0, HasPreviousPage: false, HasNextPage: false);

    [SupplyParameterFromQuery]
    public int? Before { get; set; }

    [SupplyParameterFromQuery]
    public int? After { get; set; }

    [Parameter] public int? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        catalog = await CatalogService.GetItemsAsync(Before, After);

        if (catalog is null)
        {
            return;
        }

        paginationInfo = new PaginationInfo(catalog.FirstId, catalog.NextId, catalog.FirstId > 1, !catalog.IsLastPage);
    }

    void AddToCart()
    {
        if (Id == null)
        {
            return;
        }

        var item = catalog!.Data.FirstOrDefault(i => i.Id == Id);

        if (item == null)
        {
            return;
        }

        // To actually add it to cart, we should add some Cart model either as a scoped DI service or
        // as a cascading parameter, so it can be consumed by both <App> and <Cart>. It would have an
        // "Add" method that triggers some event that other components can listen to and call their
        // own "StateHasChanged". Alternatively, render the cart from <App> via the sections feature,
        // so it can share the same info automatically.
        Console.WriteLine("Trying to add to cart: " + item.Name);

        // Note: we can't P/R/G yet because `DispatchCapturedEvent` doesn't catch and deal with NavigationException,
        // so the following would just fail. It's also a bit painful having to remove the "handler" param manually.
        // That problem could go away if "handler" was a hidden POST field.

        // Nav.NavigateTo(Nav.GetUriWithQueryParameter("handler", (string?)null));
    }

    record PaginationInfo(int FirstId, int NextId, bool HasPreviousPage, bool HasNextPage);
}